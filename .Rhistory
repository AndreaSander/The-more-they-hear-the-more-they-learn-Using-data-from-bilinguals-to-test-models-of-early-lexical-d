mutate(trial_lang = case_when(str_detect(studio_test_name,"E")~ "english",
str_detect(studio_test_name, "F")~ "french"))
#centering to an easy to interpret value that is close to the mean, 25 months for age and 50% for experience.
arch_re_zero<- arch_re_zero%>%
mutate(exp_to_target_lang = case_when(trial_lang == "english" ~ eng_exp,
trial_lang == "french" ~ fre_exp)) %>%
mutate(exp_target_lang_prop = exp_to_target_lang/100)
#mean(arch_re_zero$age_months)#25.79
#mean(arch_re_zero$exp_target_lang_prop) #0.57
arch_re_zero_c<- arch_re_zero %>%
mutate(age_centered = age_months-25) %>%
mutate(exp_centered =exp_target_lang_prop - .50)
for_lmm <- arch_re_zero_c
for_lmm <- for_lmm %>%
filter(noun_onset>= 360 & noun_onset <= 3000)%>%
group_by(recording_name, subject_id, trial_number, media_name, age_centered,exp_centered)%>%
summarise(samples_total=sum(target==TRUE, target==FALSE ),
samples_target=sum(target))%>%
mutate(prop_looking= samples_target/samples_total)
lmm_age_only <- lmer (prop_looking ~ age_centered + (1|subject_id) + (1|media_name), data = for_lmm)
summary(lmm_age_only)
#1) Maturation only
lmm_age_only <- lmer (prop_looking ~ age_centered + (1|subject_id) + (1|media_name), data = for_lmm)
summary(lmm_age_only)
#2) Experience only
lmm_experience_only <- lmer (prop_looking ~ exp_centered + (1|subject_id) + (1|media_name), data = for_lmm)
summary(lmm_experience_only)
#3)Accumulator model
lmm_accumulator <- lmer (prop_looking ~ exp_centered * age_centered + (1|subject_id) + (1|media_name), data = for_lmm)
summary(lmm_accumulator)
#4) Additive Model
lmm_aditive <- lmer (prop_looking ~ exp_centered + age_centered + (1|subject_id) + (1|media_name), data = for_lmm)
summary(lmm_aditive) #<- SELECTED MODEL
anova(lmm_aditive, lmm_experience_only)
anova(lmm_aditive, lmm_age_only)
anova(lmm_aditive, lmm_accumulator)
anova(lmm_accumulator, lmm_experience_only)
anova(lmm_accumulator, lmm_age_only)
#to calculate r squared equivalent for lmm based on Sonderegger et al., 2018
cor(predict(lmm_age_only), for_lmm$prop_looking)^2  # age only= 0.248
cor(predict(lmm_experience_only), for_lmm$prop_looking)^2 #experience only= .255
cor(predict(lmm_accumulator), for_lmm$prop_looking)^2 #accumulator =.244
cor(predict(lmm_aditive), for_lmm$prop_looking)^2 #aditive =.244
res_simulation  <- simulateResiduals(fittedModel = lmm_aditive , plot = T)
plotQQunif(res_simulation)
plotResiduals(res_simulation)
testUniformity(res_simulation) #One-sample kolmogorov-Smirov test p-value= <.001
testOutliers(res_simulation)
testDispersion(res_simulation)
testZeroInflation(res_simulation)
plot(res_simulation, quantreg = T)
check_model(lmm_aditive)
library(see)
library(patchwork)
library(tidyverse)
library(here)
library(dplyr)
library(lme4)
library(lmerTest)
library(afex)
library(gazer)
library(mgcv)
library(DHARMa)
library(performance)
check_model(lmm_aditive)
library(see)
library(patchwork)
library(tidyverse)
library(here)
library(dplyr)
library(lme4)
library(lmerTest)
library(afex)
library(gazer)
library(mgcv)
library(gamm4)
library(broom)
library(ggiraph)
library(ggiraphExtra)
library(ggeffects)
library(ggExtra)
library(sjPlot)
library(DHARMa)
library(performance)
library(broom.mixed)
library(rempsyc)
check_model(lmm_aditive)
?check_model
library(see)
library(patchwork)
library(tidyverse)
library(here)
library(dplyr)
library(lme4)
library(lmerTest)
library(afex)
library(gazer)
library(mgcv)
library(gamm4)
library(broom)
library(ggiraph)
library(ggiraphExtra)
library(ggeffects)
library(ggExtra)
library(sjPlot)
library(DHARMa)
library(performance)
library(broom.mixed)
library(rempsyc)
load(here("merged_data_sets/arch_final.Rda"))
arch_re_zero<- arch_final%>%
group_by(studio_project_name, studio_test_name, trial_number, recording_name)%>%
mutate(trial_from_zero = recording_timestamp-min(recording_timestamp))%>%
group_by(studio_project_name)%>%
mutate(noun_onset = case_when(studio_project_name=="CompMix-36"~trial_from_zero-3000,
studio_project_name=="LearnMix-36"~trial_from_zero-4500,
studio_project_name=="Mix-20"~trial_from_zero-5400,
studio_project_name=="Mix-14"~trial_from_zero-5400,
studio_project_name=="CogMisp-24"~trial_from_zero-1500))%>%
ungroup()%>%
rename(target_side=target, distractor_side=distractor,
gaze_point_x= gaze_point_x_adc_spx,
gaze_point_y = gaze_point_y_adc_spx)%>%
filter(gaze_point_x>=0 & gaze_point_x<= 1920)%>% #keeps only observations that are in the screen
filter(gaze_point_y>=0 & gaze_point_y<=1200)%>%
filter(!is.na(gaze_point_x))%>% #gets rid of the observations where tobii didn't get any reading
filter(!is.na(gaze_point_y))%>%
filter(!is.na(validity_left)) %>%
filter(!is.na(validity_right)) %>%
filter(validity_left<= 1)%>%
filter(validity_right <= 1)%>%
mutate(target = case_when(gaze_point_x >= target_x_min&gaze_point_x <= target_x_max&gaze_point_y >= target_y_min&gaze_point_y <= target_y_max~TRUE,
TRUE~FALSE))
arch_re_zero <- arch_re_zero%>%
ungroup()%>%
group_by(studio_test_name, eng_exp, fre_exp)%>%
mutate(trial_lang = case_when(str_detect(studio_test_name,"E")~ "english",
str_detect(studio_test_name, "F")~ "french"))
#centering to an easy to interpret value that is close to the mean, 25 months for age and 50% for experience.
arch_re_zero<- arch_re_zero%>%
mutate(exp_to_target_lang = case_when(trial_lang == "english" ~ eng_exp,
trial_lang == "french" ~ fre_exp)) %>%
mutate(exp_target_lang_prop = exp_to_target_lang/100)
#mean(arch_re_zero$age_months)#25.79
#mean(arch_re_zero$exp_target_lang_prop) #0.57
arch_re_zero_c<- arch_re_zero %>%
mutate(age_centered = age_months-25) %>%
mutate(exp_centered =exp_target_lang_prop - .50)
for_lmm <- arch_re_zero_c
for_lmm <- for_lmm %>%
filter(noun_onset>= 360 & noun_onset <= 3000)%>%
group_by(recording_name, subject_id, trial_number, media_name, age_centered,exp_centered)%>%
summarise(samples_total=sum(target==TRUE, target==FALSE ),
samples_target=sum(target))%>%
mutate(prop_looking= samples_target/samples_total)
#1) Maturation only
lmm_age_only <- lmer (prop_looking ~ age_centered + (1|subject_id) + (1|media_name), data = for_lmm)
summary(lmm_age_only)
#2) Experience only
lmm_experience_only <- lmer (prop_looking ~ exp_centered + (1|subject_id) + (1|media_name), data = for_lmm)
summary(lmm_experience_only)
#3)Accumulator model
lmm_accumulator <- lmer (prop_looking ~ exp_centered * age_centered + (1|subject_id) + (1|media_name), data = for_lmm)
summary(lmm_accumulator)
#4) Additive Model
lmm_aditive <- lmer (prop_looking ~ exp_centered + age_centered + (1|subject_id) + (1|media_name), data = for_lmm)
summary(lmm_aditive) #<- SELECTED MODEL
anova(lmm_aditive, lmm_experience_only)
anova(lmm_aditive, lmm_age_only)
anova(lmm_aditive, lmm_accumulator)
anova(lmm_accumulator, lmm_experience_only)
anova(lmm_accumulator, lmm_age_only)
#to calculate r squared equivalent for lmm based on Sonderegger et al., 2018
cor(predict(lmm_age_only), for_lmm$prop_looking)^2  # age only= 0.248
cor(predict(lmm_experience_only), for_lmm$prop_looking)^2 #experience only= .255
cor(predict(lmm_accumulator), for_lmm$prop_looking)^2 #accumulator =.244
cor(predict(lmm_aditive), for_lmm$prop_looking)^2 #aditive =.244
res_simulation  <- simulateResiduals(fittedModel = lmm_aditive , plot = T)
plotQQunif(res_simulation)
plotResiduals(res_simulation)
testUniformity(res_simulation) #One-sample kolmogorov-Smirov test p-value= <.001
testOutliers(res_simulation)
testDispersion(res_simulation)
testZeroInflation(res_simulation)
plot(res_simulation, quantreg = T)
check_model(lmm_aditive)
?check_model
check_model(lmm_aditive, theme ="see:: theme_minimal")
check_model(lmm_aditive, panel=F)
res_simulation  <- simulateResiduals(fittedModel = lmm_aditive , plot = T)
plotQQunif(res_simulation)
plotResiduals(res_simulation)
testUniformity(res_simulation) #One-sample kolmogorov-Smirov test p-value= <.001
testOutliers(res_simulation)
testDispersion(res_simulation)
testZeroInflation(res_simulation)
plot(res_simulation, quantreg = T)
check_model(lmm_aditive, panel=F)
lm.beta.lmer <- function(mod) {
b <- fixef(mod)[-1]
sd.x <- apply(getME(mod,"X")[,-1],2,sd)
sd.y <- sd(getME(mod,"y"))
b*sd.x/sd.y
}
s_lm.beta.lmer <- function(mod) {
b <- fixef(mod)[-1];
sd.x <- apply(matrix(getME(mod,"X")[,-1]),2,sd);
sd.y <- sd(getME(mod,"y")); b*sd.x/sd.y; }
lm.beta.lmer(lmm_aditive)
lm.beta.lmer(lmm_accumulator)
s_lm.beta.lmer(lmm_age_only)
s_lm.beta.lmer(lmm_experience_only)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
library(dplyr)
library(lme4)
library(lmerTest)
library(afex)
library(gazer)
library(ggiraph)
library(ggiraphExtra)
library(ggeffects)
library(sjPlot)
load(here("arch_final.Rda"))
load(here("merged_data_sets/arch_final.Rda"))
arch_re_zero<- arch_final%>%
group_by(studio_project_name, studio_test_name, trial_number, recording_name)%>%
mutate(trial_from_zero = recording_timestamp-min(recording_timestamp))%>%
group_by(studio_project_name)%>%
mutate(noun_onset = case_when(studio_project_name=="CompMix-36"~trial_from_zero-3000,
studio_project_name=="LearnMix-36"~trial_from_zero-4500,
studio_project_name=="Mix-20"~trial_from_zero-5400,
studio_project_name=="Mix-14"~trial_from_zero-5400,
studio_project_name=="CogMisp-24"~trial_from_zero-1500))%>%
ungroup()%>%
rename(target_side=target, distractor_side=distractor,
gaze_point_x= gaze_point_x_adc_spx,
gaze_point_y = gaze_point_y_adc_spx)%>%
filter(gaze_point_x>=0 & gaze_point_x<= 1920)%>% #keeps only observations that are in the screen
filter(gaze_point_y>=0 & gaze_point_y<=1200)%>%
filter(!is.na(gaze_point_x))%>% #gets rid of the observations where tobii didn't get any reading
filter(!is.na(gaze_point_y))%>%
filter(!is.na(validity_left)) %>%
filter(!is.na(validity_right)) %>%
filter(validity_left<= 1)%>%
filter(validity_right <= 1)%>%
mutate(target = case_when(gaze_point_x >= target_x_min&gaze_point_x <= target_x_max&gaze_point_y >= target_y_min&gaze_point_y <= target_y_max~TRUE,
TRUE~FALSE))
arch_re_zero <- arch_re_zero%>%
ungroup()%>%
group_by(studio_test_name, eng_exp, fre_exp)%>%
mutate(trial_lang = case_when(str_detect(studio_test_name,"E")~ "english",
str_detect(studio_test_name, "F")~ "french"))
#centering to an easy to interpret value that is close to the mean, 25 months for age and 50% for experience.
arch_re_zero<- arch_re_zero%>%
mutate(exp_to_target_lang = case_when(trial_lang == "english" ~ eng_exp,
trial_lang == "french" ~ fre_exp)) %>%
mutate(exp_target_lang_prop = exp_to_target_lang/100)
#mean(arch_re_zero$age_months)#25.79
#mean(arch_re_zero$exp_target_lang_prop) #0.57
arch_re_zero_c<- arch_re_zero %>%
mutate(age_centered = age_months-25) %>%
mutate(exp_centered =exp_target_lang_prop - .50)
for_lmm_viz <- arch_re_zero_c
for_lmm_viz <- for_lmm_viz %>%
filter(noun_onset>= 360 & noun_onset <= 3000)%>%
group_by(recording_name, subject_id, trial_number, media_name, age_months,exp_target_lang_prop)%>%
summarise(samples_total=sum(target==TRUE, target==FALSE ),
samples_target=sum(target))%>%
mutate(prop_looking= samples_target/samples_total)
lmm_viz_aditive <- lmer (prop_looking ~ exp_target_lang_prop + age_months + (1|subject_id) + (1|media_name), data = for_lmm_viz)
#using plot_model from sjplot in brackets added the values in which to predict effects so that the function does not extrapolate.
x<- plot_model(lmm_viz_aditive, type="eff", terms = c("age_months[14,20, 26, 32, 38, 44, 48] ", "exp_target_lang_prop[1 , 0.75, 0.5, 0.25]"), line.size = 0.8, colors = c("#feb24c", "#ef6548", "#d7301f", "#7f0000"),
legend.title = "Exposure to target language (proportion)", title = "Predicted values of looking accuracy for the additive model")
x + theme_bw() +
xlab("Age (months)")+
ylab("Proportion looking to target")+
ylim(0.0, 1.0)+
xlim(14, 48)+
geom_hline(yintercept = 0.5 , linetype = "dashed")+
annotate("text", y=0.48, x=30, label="Chance looking to target", size=5)+
guides (col= guide_legend(reverse= TRUE))+
theme(legend.text = element_text(size = 15), legend.title = element_text(size = 15), plot.title = element_text(size = 20), axis.title = element_text(size = 18), axis.text = element_text(size = 15))
y<- plot_models (lmm_accumulator,lmm_aditive, lmm_age_only, lmm_experience_only, show.values=TRUE, show.p = TRUE, legend.title = "Model tested", title= "Forest plot of coefficients and significance values by model by predictor")
#using plot_model from sjplot in brackets added the values in which to predict effects so that the function does not extrapolate.
x<- plot_model(lmm_viz_aditive, type="eff", terms = c("age_months[14,20, 26, 32, 38, 44, 48] ", "exp_target_lang_prop[1 , 0.75, 0.5, 0.25]"), line.size = 0.8, colors = c("#feb24c", "#ef6548", "#d7301f", "#7f0000"),
legend.title = "Exposure to target language (proportion)", title = "Predicted values of looking accuracy for the additive model")
x + theme_bw() +
xlab("Age (months)")+
ylab("Proportion looking to target")+
ylim(0.0, 1.0)+
xlim(14, 48)+
geom_hline(yintercept = 0.5 , linetype = "dashed")+
annotate("text", y=0.48, x=30, label="Chance looking to target", size=5)+
guides (col= guide_legend(reverse= TRUE))+
theme(legend.text = element_text(size = 15), legend.title = element_text(size = 15), plot.title = element_text(size = 20), axis.title = element_text(size = 18), axis.text = element_text(size = 15))
tc <- arch_re_zero%>%
mutate(exp_bins = case_when(exp_target_lang_prop >= 0.1 & exp_target_lang_prop <=.25 ~".25",
exp_target_lang_prop >= .26 & exp_target_lang_prop <=.5 ~".5",
exp_target_lang_prop >=.51 & exp_target_lang_prop <=.75 ~".75",
exp_target_lang_prop >=.76 & exp_target_lang_prop <=1 ~"1"))%>%
mutate(age_bins= case_when(age_months >=14 & age_months<=20.9~"14-20",
age_months >=21 & age_months<=28.9~"21-28",
age_months >=29 & age_months<=36.9~"29-36",
age_months>=37 & age_months<=48.9~"37-48"))
tc%>%
filter(noun_onset>=360 & noun_onset<=3000)%>%
group_by(age_bins,exp_bins, interval = ifelse(ceiling(noun_onset/100) == 0, 100, ceiling(noun_onset/100)*100))%>%
summarise(looking=mean(target, na.rm=T))%>%
ggplot(aes(x=interval, y=looking, color=exp_bins))+
geom_line(size=1)+
#    stat_summary(aes(y = looking), fun.y=mean, colour="black", geom="line", size=0.8, alpha=0.5)+
facet_grid(~age_bins)+
scale_y_continuous(limits = c(0,1))+
labs(x="time from noun onset (ms)",
y= "proportion looking to target")+
ggtitle("time series of infant looking by age group divided by experience")+
scale_color_manual(values = c("#feb24c", "#ef6548", "#d7301f", "#7f0000"))+
theme_bw()+
theme(legend.text = element_text(size = 15), legend.title = element_text(size = 15),
plot.title = element_text(size = 20), axis.title = element_text(size = 18),
axis.text = element_text(size = 15), strip.text.x = element_text(size = 15)) +
guides (col= guide_legend(reverse= TRUE))
tc%>%
filter(noun_onset>=360 & noun_onset<=3000)%>%
group_by(age_bins,exp_bins, interval = ifelse(ceiling(noun_onset/100) == 0, 100, ceiling(noun_onset/100)*100))%>%
summarise(looking=mean(target, na.rm=T))%>%
ggplot(aes(x=interval, y=looking, color=age_bins))+
geom_line(size=1)+
#    stat_summary(aes(y = looking), fun.y=mean, colour="black", geom="line", size=0.8, alpha=0.5)+
facet_grid(~exp_bins)+
scale_y_continuous(limits = c(0,1))+
labs(x="time from noun onset (ms)",
y= "proportion looking to target")+
ggtitle("time series of infant looking by age group divided by experience")+
scale_color_manual(values = c("#feb24c", "#ef6548", "#d7301f", "#7f0000"))+
theme(legend.text = element_text(size = 15), legend.title = element_text(size = 15), plot.title = element_text(size = 20), axis.title = element_text(size = 18), axis.text = element_text(size = 15))
theme_bw()+
guides (col= guide_legend(reverse= TRUE))
m<- arch_re_zero #but without age centered
pm<- m %>%
ggplot(aes(x=age_months, y=exp_to_target_lang)) +
geom_point() +
theme(legend.position="none")+
xlab("Age(months)") +
ylab("Experience with target language (%)")+
theme_bw()
marginal<- ggMarginal(pm, type="histogram",
xparams = list(binwidth = 5, fill= "#fc8d59"),
yparams = list(binwidth = 10, fill= "#91cf60"))
ggsave("marginal_plot.jpg")
print(marginal)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(here)
library(dplyr)
library(lme4)
library(lmerTest)
library(afex)
library(gazer)
library(mgcv)
library(gamm4)
library(broom)
library(rempsyc)
load(here("arch_final.Rda"))
load(here("merged_data_sets/arch_final.Rda"))
arch_re_zero<- arch_final%>%
group_by(studio_project_name, studio_test_name, trial_number, recording_name)%>%
mutate(trial_from_zero = recording_timestamp-min(recording_timestamp))%>%
group_by(studio_project_name)%>%
mutate(noun_onset = case_when(studio_project_name=="CompMix-36"~trial_from_zero-3000,
studio_project_name=="LearnMix-36"~trial_from_zero-4500,
studio_project_name=="Mix-20"~trial_from_zero-5400,
studio_project_name=="Mix-14"~trial_from_zero-5400,
studio_project_name=="CogMisp-24"~trial_from_zero-1500))%>%
ungroup()%>%
rename(target_side=target, distractor_side=distractor,
gaze_point_x= gaze_point_x_adc_spx,
gaze_point_y = gaze_point_y_adc_spx)%>%
filter(gaze_point_x>=0 & gaze_point_x<= 1920)%>% #keeps only observations that are in the screen
filter(gaze_point_y>=0 & gaze_point_y<=1200)%>%
filter(!is.na(gaze_point_x))%>% #gets rid of the observations where tobii didn't get any reading
filter(!is.na(gaze_point_y))%>%
filter(!is.na(validity_left)) %>%
filter(!is.na(validity_right)) %>%
filter(validity_left<= 1)%>%
filter(validity_right <= 1)%>%
mutate(target = case_when(gaze_point_x >= target_x_min&gaze_point_x <= target_x_max&gaze_point_y >= target_y_min&gaze_point_y <= target_y_max~TRUE,
TRUE~FALSE))
arch_re_zero <- arch_re_zero%>%
ungroup()%>%
group_by(studio_test_name, eng_exp, fre_exp)%>%
mutate(trial_lang = case_when(str_detect(studio_test_name,"E")~ "english",
str_detect(studio_test_name, "F")~ "french"))
#centering to an easy to interpret value that is close to the mean, 25 months for age and 50% for experience.
arch_re_zero<- arch_re_zero%>%
mutate(exp_to_target_lang = case_when(trial_lang == "english" ~ eng_exp,
trial_lang == "french" ~ fre_exp)) %>%
mutate(exp_target_lang_prop = exp_to_target_lang/100)
#mean(arch_re_zero$age_months)#25.79
#mean(arch_re_zero$exp_target_lang_prop) #0.57
arch_re_zero_c<- arch_re_zero %>%
mutate(age_centered = age_months-25) %>%
mutate(exp_centered =exp_target_lang_prop - .50)
for_gca <- arch_re_zero_c%>%
filter(noun_onset>=360 & noun_onset<=2500) %>%
mutate(time_bins= ifelse(ceiling(noun_onset/100) == 0, 100, ceiling(noun_onset/100)*100))%>%
ungroup()%>%
group_by(recording_name, subject_id, trial_number, media_name,age_centered, exp_centered, time_bins)%>%
summarise(samples_total=sum(target==TRUE, target==FALSE ),
samples_target=sum(target))%>%
mutate(prop_looking= samples_target/samples_total )
for_gca <- code_poly(for_gca, predictor = "time_bins", poly.order=3, draw.poly = FALSE)
gca_age_only <- lmer (prop_looking ~ poly1*age_centered + poly2*age_centered + (1|subject_id) + (1|media_name), data = for_gca)
summary(gca_age_only)
gca_experience_only <- lmer (prop_looking ~ poly1*exp_centered + poly2*exp_centered+ (1|subject_id) + (1|media_name), data = for_gca)
summary(gca_experience_only)
gca_additive <- lmer (prop_looking ~ poly1*exp_centered + poly1*age_centered + poly2*exp_centered + poly2*age_centered + (1|subject_id) + (1|media_name), data = for_gca)
gca_accumulator <- lmer (prop_looking ~ poly1*(exp_centered*age_centered)+ poly2*(exp_centered*age_centered)+ (1|subject_id) + (1|media_name), data = for_gca)
#age gc model results tables
age_res<- tidy(gca_age_only)
form_age_res <-  age_res %>% as.data.frame() %>%
mutate (p.value = format_value(p.value, "p")) %>%
write_csv(file = "Figures/gc_age_table.csv")
#age gc model results tables
age_res<- tidy(gca_age_only)
form_age_res <-  age_res %>% as.data.frame() %>%
mutate (p.value = format_value(p.value, "p")) %>%
write_csv(file = "supplementary_tables/gc_age_table.csv")
#Experience gc model results tables
exp_res<- tidy(gca_experience_only)
form_exp_res <-  exp_res %>% as.data.frame() %>%
mutate (p.value = format_value(p.value, "p")) %>%
write_csv(file = "supplementary_tables/gc_exp_table.csv")
#Aditive gc model results tables
additive_res<- tidy(gca_additive)
additive_res <-  additive_res %>% as.data.frame() %>%
mutate (p.value = format_value(p.value, "p")) %>%
write_csv(file = "supplementary_tables/gc_aditive_table.csv")
#Accumulator gc model results tables
accumulator_res<- tidy(gca_accumulator)
accumulator_res <-  accumulator_res %>% as.data.frame() %>%
mutate (p.value = format_value(p.value, "p")) %>%
write_csv(file = "supplementary_tables/gc_acc_table.csv")
#age as a smooth (non-linear) effect. No interaction effect
gam1<- gamm4(prop_looking ~ s(age_centered), data = for_lmm, random=~((1|media_name)+ (1|subject_id)))
##-------------------Data preparation for GAMs (LMMs)-------------------------------------##
for_lmm <- arch_re_zero_c
for_lmm <- for_lmm %>%
filter(noun_onset>= 360 & noun_onset <= 3000)%>%
group_by(recording_name, subject_id, trial_number, media_name, age_centered,exp_centered)%>%
summarise(samples_total=sum(target==TRUE, target==FALSE ),
samples_target=sum(target))%>%
mutate(prop_looking= samples_target/samples_total)
#age as a smooth (non-linear) effect. No interaction effect
gam1<- gamm4(prop_looking ~ s(age_centered), data = for_lmm, random=~((1|media_name)+ (1|subject_id)))
summary(gam1$gam)
summary(gam1$mer)
#Experience as a smooth (non-linear) effect. No interaction effect
gam2<- gamm4(prop_looking ~ s(exp_centered), data = for_lmm, random=~((1|media_name)+ (1|subject_id)))
summary(gam2$gam)
summary(gam2$mer)
#Addition of age and experience as smooth effects
gam3<- gamm4(prop_looking ~ s(exp_centered) + s(age_centered), data = for_lmm, random=~((1|media_name)+ (1|subject_id)))
summary(gam3$gam)
summary(gam3$mer)
##Age tables
age_gam<- tidy(gam1$gam)
age_mer<- tidy(gam1$mer)
age_gam <-  age_gam %>% as.data.frame() %>%
mutate (p.value = format_value(p.value, "p")) %>%
write_csv(file = "supplementary_tables/age_gam.csv")
age_mer <-  age_mer %>% as.data.frame() %>%
write_csv(file = "supplementary_tables/age_mer.csv")
##Experience tables
exp_gam<- tidy(gam2$gam)
exp_mer<- tidy(gam2$mer)
exp_gam <-  exp_gam %>% as.data.frame() %>%
mutate (p.value = format_value(p.value, "p")) %>%
write_csv(file = "supplementary_tables/exp_gam.csv")
exp_mer <-  exp_mer %>% as.data.frame() %>%
write_csv(file = "supplementary_tables/exp_mer.csv")
## Additive tables
additive_gam<- tidy(gam3$gam)
additive_mer<- tidy(gam3$mer)
additive_gam <-  additive_gam %>% as.data.frame() %>%
mutate (p.value = format_value(p.value, "p")) %>%
write_csv(file = "supplementary_tables/additive_gam.csv")
additive_mer <-  additive_mer %>% as.data.frame() %>%
write_csv(file = "supplementary_tables/additive_mer.csv")
logi_age <- glmer(prop_looking ~ age_centered  + (1|subject_id) + (1|media_name), data = for_lmm, family="binomial", control=glmerControl(optimizer = "bobyqa"))
summary(logi_age)
logi_exp <- glmer(prop_looking ~ exp_centered  + (1|subject_id) + (1|media_name), data = for_lmm, family="binomial", control=glmerControl(optimizer = "bobyqa"))
logi_additive <- glmer(prop_looking ~ exp_centered  + age_centered + (1|subject_id) + (1|media_name), data = for_lmm, family="binomial", control=glmerControl(optimizer = "bobyqa"))
logi_accumulator <- glmer(prop_looking ~ exp_centered*age_centered + (1|subject_id) + (1|media_name), data = for_lmm, family="binomial", control=glmerControl(optimizer = "bobyqa"))
age_logi<- tidy(logi_age)
age_logi <-  age_logi %>% as.data.frame() %>%
mutate (p.value = format_value(p.value, "p")) %>%
write_csv(file = "supplementary_tables/glmer_age.csv")
exp_logi<- tidy(logi_exp)
exp_logi <-  exp_logi %>% as.data.frame() %>%
mutate (p.value = format_value(p.value, "p")) %>%
write_csv(file = "supplementary_tables/glmer_exp.csv")
add_logi<- tidy(logi_additive)
add_logi <-  add_logi %>% as.data.frame() %>%
mutate (p.value = format_value(p.value, "p")) %>%
write_csv(file = "supplementary_tables/glmer_add.csv")
acc_logi<- tidy(logi_accumulator)
acc_logi <-  acc_logi %>% as.data.frame() %>%
mutate (p.value = format_value(p.value, "p")) %>%
write_csv(file = "supplementary_tables/glmer_acc.csv")
